export interface serverResponse {
  name: string,
  id?: string,
  pid?: string,
  img?: string,
}
export interface nodeResponse {
  id?: string,
  pid?: string,
  img?: string,
  nodeType: string,
  selfServiceEnabled: number,
  nodeId: number,
  name: string,
  host: string,
  port: number,
  userName: string,
  password: string,
  domain: number,
  ssl: number,
  dataNodeType: string,
  timeOut: number,
  defaultDatabase: string,
}

export interface connectorTaskResponse {
  id?: string,
  pid?: string,
  img?: string,
  connectorId: string,
  state: number,
  status: number,
  statusMessage: string,
  type: number,
  limitData: number,
  queryParameter: any[],
  bulkInsert: number,
  bufferSize: number,
  reportEmails: string,
  domain: string,
  nextRunTime: string,
  keepExistingSchema: number,
  commandTimeOut: number,
  inMemory: number,
  disableThreshold: number,
  errorCount: number,
  folder: string,
  ownerId: string,
  name: string,
  connectionString: string,
  sourceType: number,
  sourceDatabase: string,
  sourceServer: string,
  sourceUser: string,
  sourcePassword: string,
  sourcePort: string,
  node: string,
  bussionConnector: string,
  universe: string,
  collection: string,
  query: string,
  keyField: string,
  updateField: string,
  runAtPeriod: runAtPeriod,
}

export interface connectorResponse {
  id?: string,
  pid?: string,
  img?: string,
  nodeType: number,
  selfServiceEnabled: number,
  nodeId: string,
  name: string,
  host: string,
  port: string,
  userName: string,
  password: string,
  domain: string,
  ssl: number,
  dataNodeType: string,
  timeOut: number,
  defaultDatabase: string,
}

export interface dataStoreResponse {
  id?: string,
  pid?: string,
  img?: string,
  dataStoreId: string,
  icon: string,
  name: string,
  description: string,
  createdBy: string,
  creationDate: string,
  node: string,
  nodeId: string,
  ownerId: string,
  userName: string,
  password: string,
  universe: string,
  collection: string,
  refCollection: string,
  type: string,
  lastUpdatedTime: string,
  recordCount: string,
  domain: string,
  isSelfService: number,
  users: string,
  query: any[],
  columns: columns[],
  dataDictionary: any[],
  apiEnable: number,
  apiKey: string,
  apiEncrypted: number,
  plainQueryEnabled: number,
  wbListingEnable: number,
  whiteLists: any[],
  blackLists: any[],
  indexFields: any[],
  preparedStatementEnable: number,
  preparedStatement: any[],
}

export interface dataflowResponse {
  id?: string,
  pid?: string,
  img?: string,
  flowId: string,
  name: string,
  description: string,
  bussionConnectorId: string,
  type: number,
  version: number,
  owner: string,
  ownerId: string,
  updatedBy: string,
  createDate: string,
  updateDate: string,
  updateScriptsBeforeRun: number,
  duration: number,
  flowMetaData: string,
  scripts: script[],
}

export interface script {
  scriptId: string,
  sessionId: string,
  flowId: string,
  nodeId: string,
  processId: number,
  icon: string,
  name: string,
  description: string,
  domain: string,
  package: string,
  type: number,
  version: number,
  state: number,
  isRun: number,
  executionResult: number,
  timeout: number,
  pythonExecuteable: string,
  pythonPath: string,
  owner: string,
  ownerId: string,
  updatedBy: string,
  executedBy: string,
  createDate: string,
  updateDate: string,
  executionDate: string,
  code: string,
  ifSuccessScript: string,
  ifFailedScript: string,
  resultLog: string,
  stopIfFailed: number,
  duration: number,
  nextStep: number,
  dependency: any[],
  needsUserReview: number,
  reviewers: any[],
  variables: any[],
  codesInScript: string[],
  nextExecutions: any[],
  parameters: dataflowParameters[],
  executionLog: any[],
  explainations: any[],
}

export interface runAtPeriod {
  type: number,
  seconds: number,
  minute: number,
  hour: number,
  day: number,
  month: number,
  year: number,
}

export interface columns {
  fieldName: string,
  visibleName: string,
  fieldType: string,
  fieldFilter: number,
}

export interface dataflowParameters {
  key: string,
  value: string,
  description: string,
  type: string,
  shown: number,
  mandatory: number,
}

export interface generalResponse {
  changedWidgets: any[],
  executionTime: number,
  message: serverResponse[] | connectorResponse[] | nodeResponse[] | dataStoreResponse[] | connectorTaskResponse[] | dataflowResponse[] | string[],
  messageId: number,
  object: any | null,
  result: boolean,
}


export interface connectorTaskSource {
  id?: string,
  pid?: string,
  img?: string,
  name?: string,
  sourceType: number,
  sourceDatabase: string,
  sourceServer: string,
  sourceUser: string,
  sourcePassword: string,
  sourcePort: string,
  query?: string,
}

export interface connectorTaskDestination {
  id?: string,
  pid?: string,
  img?: string,
  name?: string,
  node: string,
  universe: string,
  collection: string,
}

export interface dataStoreCollection {
  id?: string,
  pid?: string,
  img?: string,
  name: string,
  columns: column[];
}

export interface column {
  fieldName: string,
  visibleName: string,
  fieldType: string,
  fieldFilter: number
}